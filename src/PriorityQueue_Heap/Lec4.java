package PriorityQueue_Heap;

import java.util.*;

public class Lec4 {
    public static void main(String[] args) {
        Integer[] a={9,4,3,2};
        Integer[] b={4,0,-2,-4};
        int[] ans=combinationSum(a,b);
        for(int e:ans){
            System.out.println(e+" ");
        }

    }
    static int[] combinationSum(Integer[] a,Integer[] b) {
        int n = a.length;
        int ans[] = new int[n];
        int i = 0, j = 0;
        Arrays.sort(a, Collections.reverseOrder());  //sort array in descending order
        Arrays.sort(b, Collections.reverseOrder());

        PriorityQueue<Data> pq = new PriorityQueue<>((o1, o2) -> o2.sum - o1.sum);
                                        //lambda custom comparator
                                       //make pq on the basis of max sum will be on top always
        HashSet<Data> set = new HashSet<>();

        //initially add the first index of both array as they are larger definitely
        Data firstData = new Data(a[i] + b[j], i, j);
        pq.add(firstData);
        set.add(firstData);

        for (int ind = 0; ind < n; ind++) {
            Data data = pq.poll();
            ans[ind] = data.sum;

            i = data.i;
            j = data.j;

            if (j + 1 < n) {
                Data d1 = new Data(a[i] + b[j + 1], i, j + 1);
                if (!set.contains(d1)) {
                    pq.add(d1);
                    set.add(d1);

                }
            }

            if (i + 1 < n) {
                Data d2 = new Data(a[i + 1] + b[j], i + 1, j);
                if (!set.contains(d2)) {
                    pq.add(d2);
                    set.add(d2);

                }
            }

        }
        return ans;


    }
    //custom  class
    static class Data{
        int sum,i,j;

        public Data(int sum, int i, int j) {
            this.sum = sum;
            this.i = i;
            this.j = j;
        }
        //it is generated by java (Alt insert)
        //it will check for equal index are already present in hashset then it will not store again
        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Data data = (Data) o;
            return i == data.i && j == data.j;
        }

        @Override
        public int hashCode() {
            return Objects.hash(i, j);
        }
    }
}
